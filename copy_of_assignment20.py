# -*- coding: utf-8 -*-
"""Copy of Assignment20.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yvLGldPCBjLC0Z2I8y0UbfsdDXbsFJ9w

# Assignment 20
## CSC 221
- Samuel Reid

### Instructions:
Fill in each code cell below the question. We are following along in Chapter 4 of Python Distilled.
"""

# 4.1 Essential Concepts

# When we write "a + b" in Python, the interpreter tries to execute a.__add__(b)

# Show that this is true by trying the following:
a = 6
b = 31.5
c = 'eighty'
a1 = a.__add__(93)
b1 = b.__add__(17.4)
c1 = c.__add__('three')
print(a1)
print(b1)
print(c1)

# What are the types of a, b, and c?
#- A1 is a demical
#- B1 is a float
#- C1 is a string

# Explain the results

#Each value is assigned to their respective variable and then a calculation is executed using the
#__add__ method, another implementation of the + operator.

# 4.2 through 4.4 will be covered in the next assignment

# 4.5 str and repr
# How many categpries of printing are shown below for a datetime object?
# What in the Pythion code makes each one get callled?

from datetime import date
d = date(2023, 11, 7)

print(d)           #<---- Basic String
print(f'{d}')      #<---- Basic String
print(f'{d!s}')    #<---- Basic String
print(f'{d!r}')    #|---- repr function
print(str(d))      #<---- Basic String
print(repr(d))     #|---- repr function
print(d.__str__()) #<---- Basic String
print(d.__repr__())#|---- repr function

#In string formatting, the '!r' suffix fan be added to a value to produce
#its repr() value instead of the normal string conversion.

# 4.6 First-Class Objects
# What is the significance of all objects being "first-class" in Python?

#All objects being first class means that all objects can be assigned to a name and treated
#as data. As data, objects can be stored as variables, passed as arguments, returned from functions,
#compared against other objects, and more.

# Explain by typing in the code to create and use the 'items' dictionary shown in section 4.6.

items = {
    'number' : 42               #Im using the same format as the textbook but am getting
    'text' : "Hello World"      #a syntax error?
}

items['func'] = abs

import math
items['mod'] = math

items['error'] = ValueError

nums = [1,2,3,4]
items['append'] = nums.append
# Explain each of the lines starting with '>>>' in the section.

# 4.7 Using None
# Write a function that takes two parameters and returns their sum if they are
#  integers or returns None if either one is not.

# Put in some test code to show that your function works

# INSERT YOUR CODE HERE
def addition(x, y):
  while True:
    try:
      x = int(input("Enter first number: "))
      y = int(input("Enter second number: "))
      return x + y
    except ValueError:
      return None
(addition(x, y))



from typing_extensions import Self
# 4.9 Object Protocol bv
# Create a simple object that has methods for:
#  __new__
#  __init__
#  __del__
#  __repr__
#  __str__

# Put in some test code to show how and when each of these 'magic' functions gets called.

# INSERT YOUR CODE HERE
class SomeClass:

  a = 3
  b = 4

x = SomeClass.__new__(SomeClass, Self)

if isinstance(x, SomeClass):
  x.__init__(Self)

def game(self):
  return a+b

def __del__(self):
  if a == 3:

    del game

#Honestly I got lost with this one, I was planning to create a game with all the methods
#with the textbook as a template but I dont know how to use del and repr